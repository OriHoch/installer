#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

rootDir=$(rootDir)

RKE2_VERSION=v1.30.4+rke2r1
CERT_MANAGER_VERSION=v1.15.3
RANCHER_VERSION=2.9.1

echo "Installing Jq" | log
installPackage jq
waitOrStop 0 "Failed apt install: jq"

echo "Deploying RKE2" | log
mkdir -p /etc/rancher/rke2/
cat << EOF > /etc/rancher/rke2/config.yaml
token: $(openssl rand -hex 32)
tls-san:
  - $CWM_DOMAIN
EOF
curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=$RKE2_VERSION sh -
systemctl enable rke2-server.service
systemctl start rke2-server.service
ln -s /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
sleep 5

echo "Deploying Cert-Manager" | log
cat << EOF > /var/lib/rancher/rke2/server/manifests/cert-manager.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: cert-manager
  namespace: kube-system
spec:
  repo: https://charts.jetstack.io
  chart: cert-manager
  targetNamespace: cert-manager
  version: $CERT_MANAGER_VERSION
  set:
    "crds.enabled": "true"
EOF

echo "Waiting for cluster to stabilize" | log
start_time=$(date +%s)
while (
    [ "$(kubectl get nodes --ignore-not-found -o json | jq '.items | length')" != "1" ] ||
    ! kubectl get deployment -n kube-system  rke2-coredns-rke2-coredns ||
    ! kubectl get daemonset  -n kube-system  rke2-canal ||
    ! kubectl get daemonset  -n kube-system  rke2-ingress-nginx-controller ||
    ! kubectl get deployment -n cert-manager cert-manager
); do
  sleep 1
  [ $(($(date +%s) - $start_time)) -lt 3600 ]
  waitOrStop 0 "Failed waiting cluster to stabilize"
done

echo "Deploying let's encrypt cluster issuer" | log
cat << EOF > /var/lib/rancher/rke2/server/manifests/cert-manager-letsencrypt.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt
  solvers:
    - http01:
        ingress:
          ingressClassName: nginx
EOF

echo "Deploying Rancher" | log
if [ -z "$ADMINPASSWORD" ]; then
  ADMINPASSWORD=$(openssl rand -hex 16)
fi
cat << EOF > /var/lib/rancher/rke2/server/manifests/rancher.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: cattle-system
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: rancher
  namespace: kube-system
spec:
  repo: https://releases.rancher.com/server-charts/stable
  chart: rancher
  version: $RANCHER_VERSION
  targetNamespace: cattle-system
  set:
    "hostname": "$CWM_DOMAIN"
    "bootstrapPassword": "$ADMINPASSWORD"
    "ingress.tls.source": "letsEncrypt"
    "letsEncrypt.email": "$ADMINEMAIL"
    "letsEncrypt.ingress.class": "nginx"
EOF

echo "Adding descriptions" | log
descriptionAppend "Rancher Web UI: https://${CWM_DOMAIN}"
descriptionAppend "Rancher Bootstrap Password: ${ADMINPASSWORD}"
descriptionAppend " "

tagScript success

exit 0
